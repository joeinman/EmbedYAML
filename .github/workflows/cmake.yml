name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "devel" ]
  pull_request:
    branches: [ "main", "devel" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc  # Exclude GCC on Ubuntu due to missing C++23 std::expected support

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Clang-16 on Ubuntu
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-16 lld-16

    - name: Configure CMake
      shell: bash
      run: |
        # On Ubuntu with clang, override the compiler to clang-16.
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.cpp_compiler }}" == "clang" ]]; then
          export CC=clang-16
          export CXX=clang-16
        else
          export CC=${{ matrix.c_compiler }}
          export CXX=${{ matrix.cpp_compiler }}
        fi
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
          -DBUILD_EXAMPLES=ON \
          -DCMAKE_C_COMPILER=$CC \
          -DCMAKE_CXX_COMPILER=$CXX \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -S "${{ github.workspace }}"

    - name: Build
      shell: bash
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: ctest --build-config ${{ matrix.build_type }}
